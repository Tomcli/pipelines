    // Adds any dependencies that arise from Conditions and tracks these dependencies to make sure they aren't duplicated in the case that
      // the Condition and the base task use output from the same dependency
      const conditionDeps = []
      for (const condition of (task['conditions'] || [])){
        for (const condParam of (condition['params'] || [])) {
          const conditionDep = /^(\$\(tasks\.[^.]*)/.exec(condParam['value']);  // A regex for checking if the params are being passed from another task
          if (conditionDep){
            const parentTask = conditionDep[0].substring(conditionDep[0].indexOf(".") + 1)
            graph.setEdge(parentTask, condition['conditionRef'])
            graph.setEdge(condition['conditionRef'], taskName)

            console.log("INFO")
            console.log(condInfo)
        
            // Add a node for the Condition itself
            graph.setNode(nodeStatus.id, {
              height: Constants.NODE_HEIGHT,
              icon: statusToIcon(parseNodePhase(nodeStatus.phase), nodeStatus.startedAt, nodeStatus.finishedAt, nodeStatus.message),
              label: nodeStatus.id,
              statusColoring: statusToBgColor(nodeStatus.phase as NodePhase, nodeStatus.message),
              width: Constants.NODE_WIDTH,
            });
          }
        }
      }